name: Build Main

on:
  push:
    branches: [main]

permissions:
  contents: write # Required for pushing tags

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{'{'}}{ steps.cut-tag.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: p6m-actions/js-pnpm-setup@v1
        with:
          node-version: "20"

{% if host-repository-name %}

      - name: Build (generate .output)
        env:
          MODERNJS_DEPLOY: node
        run: pnpm run deploy

      - name: Cut Tag
        id: cut-tag
        uses: p6m-actions/js-pnpm-cut-tag@v1
        with:
          version-level: "patch"

      # --- Publish .output to another repo/branch ---
      - name: Publish .output
        env:
          TARGET_REPO: '{{ organization-name }}/{{ host-repository-name }}'
          TARGET_BRANCH: '{{ host-repository-branch }}'
          PUBLISH_DIR: '{{ host-path-prefix }}/{{ project-name }}'
          GITHUB_TOKEN: ${{'{'}}{ secrets.GITHUB_TOKEN }}
          DEPLOY_PAT: ${{'{'}}{ secrets.{{deploy-secret-name}} }}
        run: |
          set -euo pipefail

          # Use version from cut-tag step
          VERSION="${{'{'}}{ steps.cut-tag.outputs.version }}"
          
          # defaults if not provided
          REPO="${TARGET_REPO}"
          BRANCH="${TARGET_BRANCH:-main}"
          
          # Append version to publish directory
          SUBDIR="${PUBLISH_DIR}/${VERSION}"

          echo "Publishing .output to ${REPO}@${BRANCH} (path: ${SUBDIR})"

          # Check if DEPLOY_PAT is available
          if [ -z "${DEPLOY_PAT:-}" ]; then
            echo "ERROR: DEPLOY_PAT secret not found"
            echo "Please create a Personal Access Token with 'repo' scope and add it as DEPLOY_PAT secret"
            exit 1
          fi

          # Authenticate with GitHub CLI using DEPLOY_PAT
          # Clear GITHUB_TOKEN so gh uses our DEPLOY_PAT instead
          unset GITHUB_TOKEN
          echo "${DEPLOY_PAT}" | gh auth login --with-token

          # Prepare a clean worktree for the target repo
          WORK=/tmp/publish
          rm -rf "$WORK"
          mkdir -p "$WORK"
          git init "$WORK"
          cd "$WORK"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Configure git to use the DEPLOY_PAT for authentication
          git config http.https://github.com/.extraheader "AUTHORIZATION: basic $(echo -n x-access-token:${DEPLOY_PAT} | base64)"
          git remote add origin "https://github.com/${REPO}.git"

          # Try to fetch existing branch; if not present, we'll create an orphan
          if git ls-remote --exit-code --heads origin "${BRANCH}" > /dev/null 2>&1; then
            git fetch origin "${BRANCH}":"${BRANCH}"
            git checkout "${BRANCH}"
          else
            git checkout --orphan "${BRANCH}"
          fi

          # Only clear the specific version directory if it exists, preserve everything else
          if [ -d "${SUBDIR}" ]; then
            echo "Updating existing version directory: ${SUBDIR}"
            git rm -r --quiet "${SUBDIR}" 2>/dev/null || true
          else
            echo "Creating new version directory: ${SUBDIR}"
          fi
          
          mkdir -p "${SUBDIR}"
          rsync -a "${GITHUB_WORKSPACE}/.output/static/" "${SUBDIR}/"

          # Optional for GitHub Pages-style hosts
          touch .nojekyll

          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          SHORT_SHA="$(echo "${GITHUB_SHA}" | cut -c1-7)"
          git commit -m "chore: publish static assets from ${VERSION} (${SHORT_SHA}) - $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          
          # Push changes using token-authenticated remote
          git push -u origin "${BRANCH}" --force-with-lease
{% endif %}
{% if not host-repository-name %}
      - name: Build
        uses: p6m-actions/js-pnpm-build@v1

      - name: Cut Tag
        id: cut-tag
        uses: p6m-actions/js-pnpm-cut-tag@v1
        with:
          version-level: "patch"
  docker-build:
    uses: p6m-dev/github-actions/.github/workflows/build-deploy-docker.yaml@main
    needs:
      - build-and-release

    with:
      registry: ${{'{'}}{ vars.ARTIFACTORY_HOSTNAME }}
      image-name: '{{ organization-name }}-docker/applications/{{ project-name }}-server'
      context: "."
      dockerfile: ./Dockerfile
      tags: |
        type=ref,event=branch
        type=ref,event=pr
        type=raw,value=latest,enable={{'{'}}{is_default_branch}}
        type=raw,value={{'${'}}{ needs.build-and-release.outputs.version }},enable={{'{'}}{is_default_branch}}
        type=sha
      # linux-arm-runner: ubuntu-24.04-arm-provisioned

    secrets:
      username: ${{'{'}}{ secrets.ARTIFACTORY_USERNAME }}
      password: ${{'{'}}{ secrets.ARTIFACTORY_IDENTITY_TOKEN }}
      secrets: |
        artifactory-token=${{'{'}}{ secrets.ARTIFACTORY_TOKEN }}

  trigger-cd:
    name: Trigger CD
    runs-on: ubuntu-latest
    if: ${{'{'}}{ github.ref_name == 'main' }}
    needs:
      - docker-build

    steps:
      - name: Get extra parameters for CICD
        run: |
          echo "GITHUB_REPOSITORY_BASENAME=$(basename ${GITHUB_REPOSITORY})" | tee -a $GITHUB_ENV

      - name: Update Application Manifest
        uses: p6m-actions/platform-application-manifest-dispatch@v1
        with:
          repository: ${{'{'}}{ github.repository }}
          image-name: ${{'{'}}{ env.GITHUB_REPOSITORY_BASENAME }}
          directory-name: ${{'{'}}{ env.GITHUB_REPOSITORY_BASENAME }}
          environment: "dev"
          digest: ${{'{'}}{ needs.docker-build.outputs.digest }}
          update-manifest-token: ${{'{'}}{ secrets.UPDATE_MANIFEST_TOKEN }}
          platform-dispatch-url: ${{'{'}}{ vars.PLATFORM_DISPATCH_URL }}
{% endif %}

