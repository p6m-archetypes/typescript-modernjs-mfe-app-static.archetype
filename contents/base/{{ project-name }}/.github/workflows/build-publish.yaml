name: Publish .output to demo deployment repo

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # write permission needed for cut-tag to push tags
    env:
      TARGET_REPO: '{{ host-repository-name }}'
      TARGET_BRANCH: '{{ host-repository-branch || 'main' }}'
      PUBLISH_DIR: 'apps/{{ project-name }}'
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: p6m-actions/js-pnpm-setup@v1
        with:
          node-version: "20"

      - name: Build (generate .output)
        env:
          MODERNJS_DEPLOY: node
        run: pnpm run deploy

      - name: Cut Tag
        id: cut-tag
        uses: p6m-actions/js-pnpm-cut-tag@v1
        with:
          version-level: "patch"

      # --- Publish .output to another repo/branch ---
      - name: Publish .output
        run: |
          set -euo pipefail

          # Use version from cut-tag step
          VERSION="${{ steps.cut-tag.outputs.version }}"
          
          # defaults if not provided
          REPO="${TARGET_REPO}"
          BRANCH="${TARGET_BRANCH:-main}"
          
          # Append version to publish directory
          SUBDIR="${PUBLISH_DIR}/${VERSION}"

          echo "Publishing .output to ${REPO}@${BRANCH} (path: ${SUBDIR})"

          # Authenticate with GitHub CLI
          echo "${GITHUB_TOKEN}" | gh auth login --with-token

          # Prepare a clean worktree for the target repo
          WORK=/tmp/publish
          rm -rf "$WORK"
          mkdir -p "$WORK"
          git init "$WORK"
          cd "$WORK"
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote add origin "https://github.com/${REPO}.git"

          # Try to fetch existing branch; if not present, we'll create an orphan
          if git ls-remote --exit-code --heads origin "${BRANCH}" > /dev/null 2>&1; then
            git fetch origin "${BRANCH}":"${BRANCH}"
            git checkout "${BRANCH}"
          else
            git checkout --orphan "${BRANCH}"
          fi

          # Only clear the specific version directory if it exists, preserve everything else
          if [ -d "${SUBDIR}" ]; then
            echo "Updating existing version directory: ${SUBDIR}"
            git rm -r --quiet "${SUBDIR}" 2>/dev/null || true
          else
            echo "Creating new version directory: ${SUBDIR}"
          fi
          
          mkdir -p "${SUBDIR}"
          rsync -a "${GITHUB_WORKSPACE}/.output/static/" "${SUBDIR}/"

          # Optional for GitHub Pages-style hosts
          touch .nojekyll

          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          SHORT_SHA="$(echo "${GITHUB_SHA}" | cut -c1-7)"
          git commit -m "chore: publish static assets from ${VERSION} (${SHORT_SHA}) - $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          
          # Use GitHub CLI for authenticated push
          gh repo set-default "${REPO}"
          git push -u origin "${BRANCH}" --force-with-lease